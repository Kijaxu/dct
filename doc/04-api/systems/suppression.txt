Generic suppression system:

The idea is to simulate suppression effects by turning off a group's AI if
a weapon impacts within a weapon's 'suppression effects ring'.

Notes:
* any weapon other than machine gun will generate a SHOT event


--[[
-- Group suppression
--
-- Example working script that will turn the group's controller off
-- when a bomb/arty shell/rocket impact 'close' to a unit within the
-- group.
--]]
local tracked_weapons = {}
shotHandler = {}
function shotHandler:onEvent(event)
  if event.id == world.event.S_EVENT_SHOT then
         if event.weapon then
              local ordnance = event.weapon
              local ordnanceName = ordnance:getTypeName()
              local WeaponPos = ordnance:getPosition().p
              local WeaponDir = ordnance:getPosition().x
              local init = event.initiator
              local init_name = ' '

              if init:isExist() then
                init_name = init:getName()
              end

              tracked_weapons[event.weapon.id_] = {
                         wpn = ordnance,
                         init = init_name,
                         pos = WeaponPos,
                         dir = WeaponDir
              }
              trigger.action.outText("Weapon Point:\nWeapon: " ..
                     ordnanceName .. "\nPos X: " ..
                     tracked_weapons[event.weapon.id_].pos.x ..
                     "\nPos Y:" ..
                     tracked_weapons[event.weapon.id_].pos.z, 5, true)
          end
    end
end
world.addEventHandler(shotHandler)


local function track_wpns(timeInterval, time)
        for wpn_id_, wpnData in pairs(tracked_weapons) do
            if wpnData.wpn:isExist() then
                wpnData.pos = wpnData.wpn:getPosition().p
                wpnData.dir = wpnData.wpn:getPosition().x
            else
                local ip = land.getIP(wpnData.pos, wpnData.dir, 20)
                local impactPoint
                if not ip then
                    impactPoint = wpnData.pos
--                    trigger.action.outText("Impact Point:\nPos X: " ..
                             impactPoint.x .. "\nPos Z: " .. impactPoint.z, 2)
                else
                    impactPoint = ip
--                    trigger.action.outText("Impact Point:\nPos X: " ..
                            impactPoint.x .. "\nPos Z: " .. impactPoint.z, 2)
                end
                foundUnits  = {}
                local VolS =
                {
                  id = world.VolumeType.SPHERE,
                  params =
                  {
                    point = impactPoint,
                    radius = 250
                  }
                }
                local function ifFound(foundItem, val)
                 local groupFound = foundItem:getGroup()
                    if groupFound:getCategory() == 2 then
                      local point1 = foundItem:getPoint()
                      point1.y = point1.y + 2
                      local point2 = impactPoint
                      point2.y = point2.y+2
                      if land.isVisible(point1, point2) == true then
                           foundUnits[#foundUnits + 1] = foundItem:getName()
                           foundItem:getGroup():getController():setOnOff(false)
                           timer.scheduleFunction(recoverSuppresion,foundItem,60)
                      end
                   end
                end

                env.warning("Begin Search", false)
                world.searchObjects(Object.Category.UNIT, VolS, ifFound)
                env.warning("Finished Search, found " ..
                     #foundUnits .. " units in LOS", false)
                tracked_weapons[wpn_id_] = nil
            end
        end
    return time + timeInterval
end
timer.scheduleFunction(track_wpns, .5, timer.getTime() + 1)

function recoverSuppresion(suppUnit)
  suppUnit:getGroup():getController():setOnOff(true)
  env.warning("Unit " ..suppUnit:getName()..
     "has recovered from suppression.", false)
end

local function ifFound(foundItem, val)
    val = fo
    env.warning("Am looking", false)
    if foundItem.Catagory == Ground_Unit then
      if isVisible(foundItem.getPosition().p, impactPoint) == true then
           foundUnits[#foundUnits + 1] = foundItem:getName()
           env.warning("FoundGround" , false)
           return true
      end
    end
  return false
end
