A dynamic campaign AI system for Digital Combat Simulator.


# Goals

What problems are we trying to solve with a dynamic AI system like this?

* _reduce time to build a scenario_
* _have agents react in a believable way_ (if a push is coming from a
  particular direction and there are CAP on station the CAP will be shifted
  to intercept this push instead of just orbiting on their racetrack until the
  push comes into "range" of this CAP)
* _reduce problem of an "empty world"_
* _reduce the requirements on a scenario designer to think about details the
  the AI should just handle_


# Core AI Components

These systems are the core "loops" that will run within the game and in some
ways represent their real life counterparts.

Taking the AI architecture from the "Total War" series we have 3 levels of AI.
These levels of AI are unique and distinct from each other for accomplishing
different goals of the overall architecture.


## Unit/Group AI

This is largely controlled directly by DCS and can only be manipulated in a
limited fashion. So we will in generally ignore/live-with what DCS currently
implements and manipulate what we can through the tactical manager.

TODO: there is some level of unit/group level ai manipulation that can happen
so this may need to be rethought later.

Individual groups of AI will still attack threats if they can.


## Tactical AI

A **Tactical AI** is **responsible for the overall tactical situation of a
coalition in a given battle space**.

### Tactical Air Commander

Is responsible for acomplishing goals related to aircraft and airspace.
Basically it tries to reduce threats to aircraft in the assigned airspace.

This commander can be tied to a physical object in game.


### AWACS / GCI

Is responsible to vectoring 

 or can monitor the
AWACS service to determine if it is "alive" or not.


## Strategic AI

The strategic AI is responsible for long term planning and issuing "orders"
(aka goals) to the tactical AI.


# Supporting Subsystems

## Sensors

Sensors are largely dictated by what is already available in DCS through the
scripting engine.

Available sensors are:
	visual, optic, radar irst, rwr, dlink

## Target Track Manager

Maintains and keeps track of targets identified by sensors. Is a central
store for all known targets detected by a given coalition.

{
	tgt = object,
	type = <bool>,  // the type of the unit known
	classification = <friendly, hostile, unknown>
	initial_contact = <time>,
	track<ring-buffer> = {
    [1] = { report=<time>, <pos>, confidence=<percent> },
    ...
    [N] = { report=<time>, <pos>, confidence=<percent> },
	}
} // indexed by Unit.getID()

Confidence is a measure of how accurate the position report is and is based
on if the distance to the target is known or if the target is visible.

The track manager will also take care of aging out old tracks.

**Data:**

* **tracks** (table) maintains a list of target tracks
* **unit list** (table) list of units that will be queried for targets
* **units per cycle** (number) of units to query for targets per cycle

**Methods:**




## Squadrons Manager

This manager handles the tracking and scheduling of aircraft under its
control and queuing up of those aircraft to be manned and launched. This
manager works closely with the airbase manager to launch and recover aircraft
safely. It also manages slot locking for player controlled slots that are
members of a squadron.

**Data:**

* **a/c type** (string) squadrons can only be composed of a single type of a/c
* **a/c max** (number) max a/c the sqdn can ever have
* **a/c table** list of available a/c including their schedule
* **mission queue** 
* **active groups**

**Methods:**

* 


## Airbase Manager

Handles aircraft to be launched or recovered at a given airbase, monitors the
number of parking spaces available at that airbase, and if unit AI have
stalled for some reason taxiing around on the airbase. In essance the airbase
manager is the garbage collector for aircraft.

**Data:**

* **active groups** (number)
* **fuel emergency limit** (percentage)
* **landing timeout** (number in seconds)
* **landed static placement** (bool)

**Methods:**

* **limit number of active groups** limits number of groups
  taxiing/landing/tanking-off, returns previous value
* **set fuel emergency threshold** sets the fuel threshold at which landing
  a/c will be piortized over taking off a/c otherwise equal weighting is
  given
* **set landing timeout** sets the amount of time allowed once a unit has
  landed before they will be despawned, optionally allows for a static standin
  unit to be spawned in a parking slot
* **add/remove exclude slots** excludes a/c slots from being utilized by the
  autospawn feature, useful if player slots spawn at a given base
* **add group to marshal** adds a group to an airbase's marshalling queue
* **add group to takeoff** adds an uncontrolled group to the takeoff queue,
  the group will be later "activated"; accepts a takeoff method and relative
  takeoff time, returns group reference
* **spawn** spawns an uncontrolled group onto the airfield, returns
  a group object; if there are not enough slots left on the airbase to spawn
  the group the function will return nil
* **spawn static** spawns an uncontrolled unit as a standin, the
  difference is this group is tracked per-airbase and parking slots occupied
  by these units are considered free and will be used to spawn in other units
* **run** starts the airbase manager running


# Resource Limits

* total number of air groups: 30
* total number of active ground and sea groups: 90

