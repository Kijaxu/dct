# Dynamic Campaign

1. Real Military Analog
1.A  Theater Commander (JFC - Joint Force Commander)
1.B  Airforce Commander (JFACC - Joint Force Air Component Commander)
1.C  Air Defense Commander (AADC - Area Air Defense Commander)

2. Strategic Planner
2.A   Doctrine
2.B   Actions
2.C   Target Selection & Risk Analysis
2.D   Mission Planning & Assignment (aka ATO generation)

2.  Air Defense Manager
2.A   Target Track Collection
2.B   Threat Analysis
2.C   Direct DCA Assets


Georgian Overall Strategic goal::
  remove all threats within the Georgian boarder and eliminate threats
  that pose a direct "grave" threat to the Georgian population (such as a
  SCUD missile) - can be summarized as avoiding threats:
	* capture or destroy all enemy owned airbases within Georgia
	* destroy 80% of all units occupying Georgian territory
	* prevent incursion of Georgian territory
	* prevent the capture of the capital
	* prevent theater strikes to population centers

Russian Overall Strategic goal::
  Exert power over the separatist Georgian government by capturing
  the Georgian capital and neutralizing Georgina's ability to wage
  direct opposition:
	* cause 75% casualties to all air assets
	* cause 85% casualties to all ground/helo assets
	* interdict 50% of all military aid to Georgia


kinds of missions (aka mission editor TASK types) {
	// Non-combat
	TRANSPORT         - transport mission
	NOTHING           - same as transport

	// Support Missions
	AFAC              - Airborne Forward Air Controller
	RECONNAISSANCE    - recon mission
	REFUELING         - tanker mission
	AWACS             - awacs mission

	// Offensive Counter Air (OCA)
	FIGHTER SWEEP     - sweep mission

	// Defensive Counter Air (DCA)
	INTERCEPT         - intercept mission
	CAP               - Combat Air Patrol
	ESCORT            - Escort mission

	// Ground/Ship Strike
	ANTI-SHIP STRIKE
	CAS
	GROUND ATTACK
	PINPOINT STRIKE
	RUNWAY ATTACK
	SEAD              - Suppression of Enemy Air Defense
}

loadout attributes {
	ATGM   - anti-tank guided missile
	ARM    - anti-radiation missile
	PR     - precision guided bomb
	AP     - armored piercing / bunker buster bomb
	CLSTR  - cluster bomb
	HD     - high drag bomb, allows extremely low level attack
	ESCORT - can self escort
}

aircraft capabilities {
	LDSD     - A2A: look down shoot down capability
	NAP      - terrain following day/night capability
	AW       - all weather capable
	NIGHT    - night operation capable
}

aircraft data {
	["<aircraft>"] = {
		capabilities:
		sortie_rate:  // average number of sorties flown in a 24hr
		              // period
		value/power:  // the base value of the unit
	}
}

attack profiles {
	high     - >= 20,000 feet all throughout
	low      - <= 10,000 feet all throughout
	hilo     - cruise of high then go low to attack
	lohi     - cruise is low go high (~18k feet) to attack
}

squadron {
	type: // the kind of aircraft flown (only one type per squadron)
	name:
	skin:
	country:
	base:
	roster {
		lost:
		maintenance:
		available:
		prep:
		assigned:
		skill: // base skill level of the squadron actual skill of
		       // individual pilots will vary with the rough average
		       // being this level
	}
	loadouts {
		["mission type"] = {
			[#] = {
				attributes:
				proficiency:  // 1 to 100 representing
				              // proficiency for loadout
				              // used in calculating
				              // mission success probability
				firepower:    // 1 to 100 the amount of
				              // "damage" the loadout is
				              // capable of
				standoff:     // range of primary weapon
				profile = {
					["lolo"] = {
					combatradius: // max range, nm
					loiter:  // max station time, minutes
					cruise = {
						alt:   // base altitude, feet
						speed: // avg speed, knots
						agl:   // true / false
					}
					attack = {
						alt:
						speed:
						agl:
					}
					["hi"] = {
					}
					["hilo"]
				}
				stores = {
					// the stores entry from the mission
					// editor
				}
			}
		}
	}
}

unit_threat_


== DCS Flight Planner

* A* pathfinding w/ avoidance, operation area & required waypoints
* DCS caucasus map size: about 900nm East-West x 500nm North-South
	primary detail map size: about 500nm East-West x 350nm North South

=== Algo Options

* avoid sensor ranges
* avoid weapon weapons
* plan profile: hi-lo-hi, hi-lo-lo, hi-hi, etc.
* waypoints can have types and specify a minimum distance for ingress

=== What is a mission?

* [really just a list of objectives at first]
  an objective (target list, area denial, transport, or support)
* weapons package
* flight plan

=== What is an ATO?

An air-tasking-order is a list of sorties to be flown over the next 24hr
period.

==== Required inputs?

* list of missions(objectives) in priority order, highest priority first
* list of threats in the theater
* list of available aircraft with a sublist per aircraft that lists a
  standard loadout for a given mission type (a "mission package")

==== Outputs?

* a list of missions in priority order to be flown plus initial
  flight plan

==== Notes

* scheduling an aircraft for a mission does not remove it from the
  available list until <weapon package prep time> hours before
  mission start. note: mission start != launch time

=== Mission Generation Factors

* mission priority
* threat level: overall risk for a given mission
* escorts: availability of SEAD or Fighter escorts for strike missions
    that need them
* route profile: flight profiles are associated with certian loadouts
* time of day: some air defense systems do not operate at night
* proficiency: how well suited is an aircraft suited for a given
    a mission task
* low level flight reduces threat ranges due to curvature of earth
* low level flight using terrain masking (could be done by generating a
   precalculating a hight map)
*

=== Types of Missions

=== Intercept missions


== Integrated Air Defense Manager

US Doctrine and generally all nations with airpower:
All early warning radar and AWACS data feed into an air defense coordination
center, which is usually regional. This regional/theater center will direct
air defence assets to deter and/or engage and destroy. All targets
processed by an ADCC are also inserted into the global target list.

This is technically too complicated we can instead simulate this by having
a global ADCC for a side and then simulate delays based on if a local
static object is dmanage/destroyed for a given local ADCC.

Algorthm::
	global gbl_tgt_set   // global set of tgts detected by a colation,
	                     // indexed on unit id
	global gbl_ewr_set   // coalition ewr stations (ships & gnd units)
	global gbl_tgt_tacks // air born ewr active tracks

	once - at mission start:
		grps = coalition.getGroups(side, Group.Category.GROUND)
		grps += coalition.getGroups(side, Group.Category.SHIP)
		gbl_ewr_set = filter_only_ewr_units(grps)
			// ewr radars are defined as
			//   is an air search radar

	scheduled every X seconds during mission:
		// get local copy of gbl_ewr_set
		// append to list are flying aircraft
		local ewr = get_active_tracking_stations(gbl_ewr_set)
		for unit_name, _ in pairs(ewr) do
			local unit = Unit.getByName(unit_name)
			gbl_tgt_set.add_detected_tgts(unit)
		end
		schedule_intercepts(filter_for_high_threats(gbl_tgt_set))

// global target list - represents all targets that have been identified
//                      by a particular side's sensor
// schema:
gbl_tgt_set = {
	[coalition.side.*] = {
		detected_objects = {
			[object.getName] = {
				category = Object.Category.*
				last_seen = // when was object last detected
				last_post = // vec3, last position of tgt
				know_type = // bool, has the object been
				          // identified (an A-10, T-90, etc..)
				know_pos = // bool, exact coords known?
			}
		}
	}
}


	function gbl_tgt_set.add_detected_tgts(self, side, unit):
		if unit == nil then
			return
		end

		local cntlr = unit:getController()
		local tgts  = cntlr:getDetectedTargets()
		local time  = timer.getTime()

		for _, tgt in pairs(tgts) do
			local tgt_name = tgt.object:getName()
			local tgt_cat  = tgt.object:getCategory()
			local last_pos = tgt.object:getPoint()

			self.add(side, tgt_name, {
						category = tgt_cat,
						last_seen = time,
						last_post = last_pos,
						know_type = tgt.type,
						know_pos = tgt.distance
					}
		end
	end


= Per mission threat analyzer (optional)

Since a side cannot guarentee knowning all information (well we could
cheat, but what is the fun in that ;) ) we need to have a periodic
process to analyze the threats a flight is actually experiancing
versus what was planned. From this information generate a number
and once this number reaches a threshold the mission is scrubbed in
flight. A waypoint would need to specify a point of no return, if no
waypoint specifies this before the flight reaches the first target
leg this is the termination point.

A single analyzer is only needed per "mission package", an example:

  A ground strike mission has assigned to it a SEAD and Escort to
  cover the strike package (could be multiple groups representing the
  strike aircraft). The point is only one analyzer is needed for all
  these groups.

data structure implied:

* pending queue of events - each event represents a modification to the
    "risk"; process the queue and update the "risk" number, not other
    data need presist.
* MAY NOT NEED: there is a DCS controller option called
    "REACTION_ON_THREAT", setting the value to "ALLOW_ABORT_MISSION" may
    be enough as opposed to this fine grained control



= Theater threat analyzer

* periodically analyzes new contact reports


= Detected targets storage

* sparse matrix indexed on position maybe a quadtree or R-tree data
  structure would be useful here
* storage needs "memory" to prevent an unbounded growth of tracked
  threats; older targets will eventually be dropped
* storage needs anti-aliasing: objects that move or static objects that
  disapear from a sensor and then get "re-seen" need to be identified
  and reduced from the set
* for moving targets their last X positions only need to be kept

= Integrated Air Defense Manager


= Past Works (Falcon 4.0)

Falcon 4.0's dynamic campaign has various sliders to set priorities
for various things like, target types, mission types, and PAKS.

Target Types::
* aircraft
* air fields
* air defense
* radar
* army
* ccc
* infrastructure
* logistics
* war production
* naval bases
* armored units
* infrantry units
* artillery units
* support units
* naval units

Mission Types::
* Offensive counter air
* SAM suppression
* Air interdiction (tactical air interdiction; such as supply convoys)
* Close Air Support
* Strategic Strikes (long term; focus on infrastructure, logistics, and
   supportive assets)
* Anti-shipping
* Defensive Counter Air
* Reconnaissance

PAKS::
* geographical priority focus

= Theater Commander (JFACC)

Resposibilities::
* generates a "commander's intent" listing the overall objectives in
  priority order for an operation
* assess results of operations
* updates objective priorities periodically based on battlespace


== General USAF Doctrial Stages

1. Control local airspace
2. 




AI needs +rewards and -rewards and contains the following properties:
* states
* actions (links between states)
* agendas (how states are ordered)

ordering states can be done with both huristics and cost


The AI environment of DCS:
* Deterministic? no - results of missions cannot be fully determined
* Fully observable? no - a side cannot see every agent's location at a single time
* Static or Dynamic? dynamic - agents will move around while we make our own decisions
* Single or multi-agent? multi-agent - multiple agents exist and provide input into the environment
* Discrete or continous? discrete
